/*
Given an array a that contains only numbers in the range from 1 to a.length, find the first duplicate number for which the second occurrence has the minimal index. In other words, if there are more than 1 duplicated numbers, return the number for which the second occurrence has a smaller index than the second occurrence of the other number does. If there are no such elements, return -1.
Example:
For a = [2, 1, 3, 5, 3, 2], the output should be firstDuplicate(a) = 3.
There are 2 duplicates: numbers 2 and 3. The second occurrence of 3 has a smaller index than the second occurrence of 2 does, so the answer is 3.
For a = [2, 2], the output should be firstDuplicate(a) = 2;
For a = [2, 4, 3, 5, 1], the output should be firstDuplicate(a) = -1.
 */

my answer:
function firstDuplicate(array){
  let obj = {}
  for(let num of array){
    obj[num] ? obj[num] += 1 : obj[num] = 1
    if (obj[num] > 1) return num
  }
  return -1
}

// function firstDuplicate(array) {
//   let resultElement;
//   let maxIndex = array.length
//   for (let i = 0; i < array.length; i++) {
//     //check array[i] to each and every other element.
//     for (let j= i + 1; j < array.length; j++) {
//       if (array[i] == array[j] && j < maxIndex) {
//         resultElement = array[j];
//         maxIndex = j;
//       }
//     }
//     // return -1;
//   }
//   return resultElement ? resultElement : -1
// }

// function firstDuplicate(array) {
//   object = {}
//   for (let i = 0; i < array.length; i++) {
//     current = array[i]
//     if (object[current]) {
//       object[current] += 1
//       if (object[current] > 1) return current
//     } else {
//       object[current] = 1
//     }
//   }
//   return -1
// }

firstDuplicate([4,0,5,5,6,4])